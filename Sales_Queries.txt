## Sales Insights Data Analysis Project

### Data Analysis Using SQL

1. Show all customer records
-- Insight: helps to understand the full customer base

	SELECT * 
	FROM customers;`

2. Show total number of customers
-- Insight: provides quick metric to assess size of customer base

	SELECT count(*) 
	FROM customers;

3. Show transactions for Chennai market (market code for chennai = 'Mark001')
-- Insight: focused analysis on specific market into regional performance, behaviors, and trends

	SELECT * 
	FROM transactions 
	WHERE market_code = 'Mark001';

4. Show distinct product codes that were sold in chennai
-- Insight: provides product offerings informing inventory and marketing strategies

	SELECT distinct product_code 
	FROM transactions 
	WHERE market_code = 'Mark001';

5. Show transactions where currency is in US dollars (USD)
-- Insight: analyzes sales performance in international market or transactions in USD

	SELECT * 
	FROM transactions 
	WHERE currency = "USD";

6. Show transactions in 2020 joined by date table
-- Insight: view of sales data over specific year

	SELECT transactions.*,
	       date.* 
	FROM transactions 
	INNER JOIN date 
		ON transactions.order_date = date.date 
	WHERE date.year = 2020;

7. Show total revenue in year 2020
-- Insight: key financial metric to assess overall business performance for that year

	SELECT SUM(transactions.sales_amount) 
	FROM transactions 
	INNER JOIN date 
		ON transactions.order_date=date.date 
	WHERE date.year=2020 
		AND transactions.currency = "INR\r" 
		OR transactions.currency = "USD\r";
	
8. Show total revenue in year January of 2020
-- Insight: analysis of season trends or impact of specific events in Jan, aiding in month-to-month comparisons

	SELECT SUM(t.sales_amount) 
	FROM transactions AS t
	INNER JOIN date 
		ON t.order_date = date.date 
	WHERE date.year = 2020 
		AND date.month_name = "January" 
		AND (t.currency = "INR" OR t.currency = "USD");

9. Show total revenue in year 2020 in Chennai
-- Insight: provides clear picture of the Chennai market contribution to overall revenue, guiding market-specific stragegies and resouce allocation

	SELECT SUM(t.sales_amount) 
	FROM transactions AS t
	INNER JOIN date 
		ON t.order_date = date.date 
	WHERE date.year = 2020
		AND t.market_code = "Mark001";

10. What are my top 2 products? 

	SELECT product_code, 
	       SUM(sales_amount) AS total_revenue
	FROM transactions
	GROUP BY product_code
	ORDER BY total_revenue DESC
	LIMIT 2;

11. What are my bottom 2 products? 

SELECT product_code, 
	       SUM(sales_amount) AS total_revenue
	FROM transactions
	GROUP BY product_code
	ORDER BY total_revenue ASC
	LIMIT 2;

12. Where are my weakest regions where business is declining?

	SELECT market_code, 
    	       SUM(sales_amount) AS total_revenue
	FROM transactions
	GROUP BY market_code
	ORDER BY total_revenue ASC
	LIMIT 3;


13. List top 5 customers by zones

	SELECT 
  	      c.customer_code,
    	      c.customer_name,
              SUM(t.sales_amount) AS total_revenue
	FROM customers AS c
	INNER JOIN transactions AS t 
		ON c.customer_code = t.customer_code
	GROUP BY c.customer_code, c.customer_name
	ORDER BY total_revenue DESC
	LIMIT 5;

14. Least sold market by zones

	SELECT market_code,
   	       SUM(sales_amount) AS total_revenue
	FROM transactions
	GROUP BY market_code
	ORDER BY total_revenue ASC
	LIMIT 1;


15. Least sold products by year

SELECT p.product_code,
       p.product_type,  
       YEAR(t.order_date) AS sales_year,
       SUM(t.sales_amount) AS total_revenue
FROM transactions AS t
INNER JOIN products AS p 
	ON t.product_code = p.product_code
GROUP BY p.product_code, p.product_type, sales_year
ORDER BY total_revenue ASC
LIMIT 1;


16. Highest total cost products

SELECT 
    p.product_code, 
    SUM(t.sales_amount) AS total_revenue
FROM transactions t
INNER JOIN products p 
    ON t.product_code = p.product_code
GROUP BY p.product_code
ORDER BY total_revenue DESC;


17. Cost vs. Revenue 

SELECT 
    p.product_code, 
    p.product_type, 
    SUM(t.sales_amount) AS total_revenue, 
    SUM(t.cost_price) AS total_cost, 
    SUM(t.sales_amount) - SUM(t.cost_price) AS total_profit
FROM transactions t
JOIN products p 
    ON t.product_code = p.product_code
GROUP BY p.product_code, p.product_type
ORDER BY total_profit DESC;


## Data Analysis Using Power BI (power query)
============================

1. Formula to create norm_amount column
-- Note: The conversion rate from USD to INR is constantly changing, but for this analysis, we're using a fixed rate of 75.

= Table.AddColumn(#"Filtered Rows", "norm_amount", each if [currency] = "USD" then [sales_amount]*75 else [sales_amount], type any)

2. Profit Margin %
% Profit Margins = DIVIDE ( [Total Profit], [Sales Measure],0)

3. Revenue
Revenue = SUM('sales transactions'[sales_amount])

4. Sales Measure
Sales Measure = 
SUM('sales transactions'[sales_qty])

5. Sales Qty
Sales Qty = SUM('sales transactions'[sales_qty])

6. Sales Variance
Sales_Variance = [Sales Qty]-BaseMeasures[SalesLastMonth]

7. Sales Variance %
Sales_Variance_% = DIVIDE([Sales_Variance],BaseMeasures[SalesLastMonth])

8. Sales Last Month
SalesLastMonth = CALCULATE(BaseMeasures[Sales Qty],
PARALLELPERIOD('sales transactions'[order_date],-1, MONTH))

9. Total Costs
Total Costs = 
SUMX('sales transactions', 'sales transactions'[cost_price] * 'sales transactions'[sales_qty])

10. Total Profits
Total Profit = [Sales Qty] - [Total Costs]

